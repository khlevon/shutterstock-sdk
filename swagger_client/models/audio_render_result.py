# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioRenderResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'timeline': 'AudioRenderTimeline',
        'status': 'str',
        'preset': 'str',
        'progress_percent': 'int',
        'files': 'list[AudioRendersFilesList]',
        'created_date': 'datetime',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'timeline': 'timeline',
        'status': 'status',
        'preset': 'preset',
        'progress_percent': 'progress_percent',
        'files': 'files',
        'created_date': 'created_date',
        'updated_date': 'updated_date'
    }

    def __init__(self, id=None, timeline=None, status=None, preset=None, progress_percent=None, files=None, created_date=None, updated_date=None):  # noqa: E501
        """AudioRenderResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._timeline = None
        self._status = None
        self._preset = None
        self._progress_percent = None
        self._files = None
        self._created_date = None
        self._updated_date = None
        self.discriminator = None
        self.id = id
        self.timeline = timeline
        self.status = status
        if preset is not None:
            self.preset = preset
        if progress_percent is not None:
            self.progress_percent = progress_percent
        if files is not None:
            self.files = files
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def id(self):
        """Gets the id of this AudioRenderResult.  # noqa: E501

        The alphanumeric ID of the simple render  # noqa: E501

        :return: The id of this AudioRenderResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioRenderResult.

        The alphanumeric ID of the simple render  # noqa: E501

        :param id: The id of this AudioRenderResult.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def timeline(self):
        """Gets the timeline of this AudioRenderResult.  # noqa: E501


        :return: The timeline of this AudioRenderResult.  # noqa: E501
        :rtype: AudioRenderTimeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this AudioRenderResult.


        :param timeline: The timeline of this AudioRenderResult.  # noqa: E501
        :type: AudioRenderTimeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")  # noqa: E501

        self._timeline = timeline

    @property
    def status(self):
        """Gets the status of this AudioRenderResult.  # noqa: E501

        A coarse progress indicator  # noqa: E501

        :return: The status of this AudioRenderResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AudioRenderResult.

        A coarse progress indicator  # noqa: E501

        :param status: The status of this AudioRenderResult.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["WAITING_COMPOSE", "RUNNING_COMPOSE", "WAITING_RENDER", "RUNNING_RENDER", "CREATED", "FAILED_CREATE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def preset(self):
        """Gets the preset of this AudioRenderResult.  # noqa: E501

        The file format preset  # noqa: E501

        :return: The preset of this AudioRenderResult.  # noqa: E501
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this AudioRenderResult.

        The file format preset  # noqa: E501

        :param preset: The preset of this AudioRenderResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["MASTER_MP3", "MASTER_WAV", "STEMS_WAV"]  # noqa: E501
        if preset not in allowed_values:
            raise ValueError(
                "Invalid value for `preset` ({0}), must be one of {1}"  # noqa: E501
                .format(preset, allowed_values)
            )

        self._preset = preset

    @property
    def progress_percent(self):
        """Gets the progress_percent of this AudioRenderResult.  # noqa: E501

        The current progress of the render as a percentage  # noqa: E501

        :return: The progress_percent of this AudioRenderResult.  # noqa: E501
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this AudioRenderResult.

        The current progress of the render as a percentage  # noqa: E501

        :param progress_percent: The progress_percent of this AudioRenderResult.  # noqa: E501
        :type: int
        """

        self._progress_percent = progress_percent

    @property
    def files(self):
        """Gets the files of this AudioRenderResult.  # noqa: E501

        The files associated with the render  # noqa: E501

        :return: The files of this AudioRenderResult.  # noqa: E501
        :rtype: list[AudioRendersFilesList]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this AudioRenderResult.

        The files associated with the render  # noqa: E501

        :param files: The files of this AudioRenderResult.  # noqa: E501
        :type: list[AudioRendersFilesList]
        """

        self._files = files

    @property
    def created_date(self):
        """Gets the created_date of this AudioRenderResult.  # noqa: E501

        The time the render was submitted to the API  # noqa: E501

        :return: The created_date of this AudioRenderResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AudioRenderResult.

        The time the render was submitted to the API  # noqa: E501

        :param created_date: The created_date of this AudioRenderResult.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this AudioRenderResult.  # noqa: E501

        The time that the audio output was uploaded  # noqa: E501

        :return: The updated_date of this AudioRenderResult.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this AudioRenderResult.

        The time that the audio output was uploaded  # noqa: E501

        :param updated_date: The updated_date of this AudioRenderResult.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioRenderResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioRenderResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
