# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioRenderTimelineSpanRegionEndType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beat': 'float',
        'event': 'str',
        'type': 'str'
    }

    attribute_map = {
        'beat': 'beat',
        'event': 'event',
        'type': 'type'
    }

    def __init__(self, beat=None, event=None, type=None):  # noqa: E501
        """AudioRenderTimelineSpanRegionEndType - a model defined in Swagger"""  # noqa: E501
        self._beat = None
        self._event = None
        self._type = None
        self.discriminator = None
        self.beat = beat
        self.event = event
        self.type = type

    @property
    def beat(self):
        """Gets the beat of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501

        The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region  # noqa: E501

        :return: The beat of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501
        :rtype: float
        """
        return self._beat

    @beat.setter
    def beat(self, beat):
        """Sets the beat of this AudioRenderTimelineSpanRegionEndType.

        The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region  # noqa: E501

        :param beat: The beat of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501
        :type: float
        """
        if beat is None:
            raise ValueError("Invalid value for `beat`, must not be `None`")  # noqa: E501

        self._beat = beat

    @property
    def event(self):
        """Gets the event of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501

        The type of event  # noqa: E501

        :return: The event of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AudioRenderTimelineSpanRegionEndType.

        The type of event  # noqa: E501

        :param event: The event of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501
        allowed_values = ["ending", "transition"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def type(self):
        """Gets the type of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501

        The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"  # noqa: E501

        :return: The type of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AudioRenderTimelineSpanRegionEndType.

        The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"  # noqa: E501

        :param type: The type of this AudioRenderTimelineSpanRegionEndType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ringout", "cut"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioRenderTimelineSpanRegionEndType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioRenderTimelineSpanRegionEndType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
