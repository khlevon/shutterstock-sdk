# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OauthAccessTokenBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'code': 'str',
        'grant_type': 'str',
        'realm': 'str',
        'expires': 'bool',
        'refresh_token': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'code': 'code',
        'grant_type': 'grant_type',
        'realm': 'realm',
        'expires': 'expires',
        'refresh_token': 'refresh_token'
    }

    def __init__(self, client_id=None, client_secret=None, code=None, grant_type=None, realm='customer', expires=False, refresh_token=None):  # noqa: E501
        """OauthAccessTokenBody1 - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._client_secret = None
        self._code = None
        self._grant_type = None
        self._realm = None
        self._expires = None
        self._refresh_token = None
        self.discriminator = None
        self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if code is not None:
            self.code = code
        self.grant_type = grant_type
        if realm is not None:
            self.realm = realm
        if expires is not None:
            self.expires = expires
        if refresh_token is not None:
            self.refresh_token = refresh_token

    @property
    def client_id(self):
        """Gets the client_id of this OauthAccessTokenBody1.  # noqa: E501

        Client ID (Consumer Key) of your application  # noqa: E501

        :return: The client_id of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OauthAccessTokenBody1.

        Client ID (Consumer Key) of your application  # noqa: E501

        :param client_id: The client_id of this OauthAccessTokenBody1.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OauthAccessTokenBody1.  # noqa: E501

        Client Secret (Consumer Secret) of your application  # noqa: E501

        :return: The client_secret of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OauthAccessTokenBody1.

        Client Secret (Consumer Secret) of your application  # noqa: E501

        :param client_secret: The client_secret of this OauthAccessTokenBody1.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def code(self):
        """Gets the code of this OauthAccessTokenBody1.  # noqa: E501

        Response code from the /oauth/authorize flow; required if grant_type=authorization_code  # noqa: E501

        :return: The code of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OauthAccessTokenBody1.

        Response code from the /oauth/authorize flow; required if grant_type=authorization_code  # noqa: E501

        :param code: The code of this OauthAccessTokenBody1.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def grant_type(self):
        """Gets the grant_type of this OauthAccessTokenBody1.  # noqa: E501

        Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants  # noqa: E501

        :return: The grant_type of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this OauthAccessTokenBody1.

        Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants  # noqa: E501

        :param grant_type: The grant_type of this OauthAccessTokenBody1.  # noqa: E501
        :type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")  # noqa: E501
        allowed_values = ["authorization_code", "client_credentials", "refresh_token"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"  # noqa: E501
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def realm(self):
        """Gets the realm of this OauthAccessTokenBody1.  # noqa: E501

        User type to be authorized (usually 'customer')  # noqa: E501

        :return: The realm of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this OauthAccessTokenBody1.

        User type to be authorized (usually 'customer')  # noqa: E501

        :param realm: The realm of this OauthAccessTokenBody1.  # noqa: E501
        :type: str
        """
        allowed_values = ["customer", "contributor"]  # noqa: E501
        if realm not in allowed_values:
            raise ValueError(
                "Invalid value for `realm` ({0}), must be one of {1}"  # noqa: E501
                .format(realm, allowed_values)
            )

        self._realm = realm

    @property
    def expires(self):
        """Gets the expires of this OauthAccessTokenBody1.  # noqa: E501

        Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token  # noqa: E501

        :return: The expires of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: bool
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this OauthAccessTokenBody1.

        Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token  # noqa: E501

        :param expires: The expires of this OauthAccessTokenBody1.  # noqa: E501
        :type: bool
        """

        self._expires = expires

    @property
    def refresh_token(self):
        """Gets the refresh_token of this OauthAccessTokenBody1.  # noqa: E501

        Pass this along with grant_type=refresh_token to get a fresh access token  # noqa: E501

        :return: The refresh_token of this OauthAccessTokenBody1.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this OauthAccessTokenBody1.

        Pass this along with grant_type=refresh_token to get a fresh access token  # noqa: E501

        :param refresh_token: The refresh_token of this OauthAccessTokenBody1.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthAccessTokenBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthAccessTokenBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
