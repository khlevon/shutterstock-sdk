# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Descriptors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'average_render_speed': 'float',
        'bands': 'list[Bands]',
        'instruments': 'list[Instruments]',
        'max_tempo': 'float',
        'min_tempo': 'float',
        'name': 'str',
        'previews': 'list[Preview]',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'average_render_speed': 'average_render_speed',
        'bands': 'bands',
        'instruments': 'instruments',
        'max_tempo': 'max_tempo',
        'min_tempo': 'min_tempo',
        'name': 'name',
        'previews': 'previews',
        'tags': 'tags'
    }

    def __init__(self, id=None, average_render_speed=None, bands=None, instruments=None, max_tempo=None, min_tempo=None, name=None, previews=None, tags=None):  # noqa: E501
        """Descriptors - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._average_render_speed = None
        self._bands = None
        self._instruments = None
        self._max_tempo = None
        self._min_tempo = None
        self._name = None
        self._previews = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if average_render_speed is not None:
            self.average_render_speed = average_render_speed
        if bands is not None:
            self.bands = bands
        if instruments is not None:
            self.instruments = instruments
        if max_tempo is not None:
            self.max_tempo = max_tempo
        if min_tempo is not None:
            self.min_tempo = min_tempo
        if name is not None:
            self.name = name
        if previews is not None:
            self.previews = previews
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this Descriptors.  # noqa: E501

        The ID of the descriptor  # noqa: E501

        :return: The id of this Descriptors.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Descriptors.

        The ID of the descriptor  # noqa: E501

        :param id: The id of this Descriptors.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def average_render_speed(self):
        """Gets the average_render_speed of this Descriptors.  # noqa: E501

        The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds  # noqa: E501

        :return: The average_render_speed of this Descriptors.  # noqa: E501
        :rtype: float
        """
        return self._average_render_speed

    @average_render_speed.setter
    def average_render_speed(self, average_render_speed):
        """Sets the average_render_speed of this Descriptors.

        The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds  # noqa: E501

        :param average_render_speed: The average_render_speed of this Descriptors.  # noqa: E501
        :type: float
        """

        self._average_render_speed = average_render_speed

    @property
    def bands(self):
        """Gets the bands of this Descriptors.  # noqa: E501

        The bands that are available to use this descriptor  # noqa: E501

        :return: The bands of this Descriptors.  # noqa: E501
        :rtype: list[Bands]
        """
        return self._bands

    @bands.setter
    def bands(self, bands):
        """Sets the bands of this Descriptors.

        The bands that are available to use this descriptor  # noqa: E501

        :param bands: The bands of this Descriptors.  # noqa: E501
        :type: list[Bands]
        """

        self._bands = bands

    @property
    def instruments(self):
        """Gets the instruments of this Descriptors.  # noqa: E501

        The instruments that can play with this descriptor  # noqa: E501

        :return: The instruments of this Descriptors.  # noqa: E501
        :rtype: list[Instruments]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this Descriptors.

        The instruments that can play with this descriptor  # noqa: E501

        :param instruments: The instruments of this Descriptors.  # noqa: E501
        :type: list[Instruments]
        """

        self._instruments = instruments

    @property
    def max_tempo(self):
        """Gets the max_tempo of this Descriptors.  # noqa: E501

        The maximum beats per minute that the descriptor is intended to be used with  # noqa: E501

        :return: The max_tempo of this Descriptors.  # noqa: E501
        :rtype: float
        """
        return self._max_tempo

    @max_tempo.setter
    def max_tempo(self, max_tempo):
        """Sets the max_tempo of this Descriptors.

        The maximum beats per minute that the descriptor is intended to be used with  # noqa: E501

        :param max_tempo: The max_tempo of this Descriptors.  # noqa: E501
        :type: float
        """

        self._max_tempo = max_tempo

    @property
    def min_tempo(self):
        """Gets the min_tempo of this Descriptors.  # noqa: E501

        The minimum beats per minute that the descriptor is intended to be used with  # noqa: E501

        :return: The min_tempo of this Descriptors.  # noqa: E501
        :rtype: float
        """
        return self._min_tempo

    @min_tempo.setter
    def min_tempo(self, min_tempo):
        """Sets the min_tempo of this Descriptors.

        The minimum beats per minute that the descriptor is intended to be used with  # noqa: E501

        :param min_tempo: The min_tempo of this Descriptors.  # noqa: E501
        :type: float
        """

        self._min_tempo = min_tempo

    @property
    def name(self):
        """Gets the name of this Descriptors.  # noqa: E501

        The name of the descriptor  # noqa: E501

        :return: The name of this Descriptors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Descriptors.

        The name of the descriptor  # noqa: E501

        :param name: The name of this Descriptors.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def previews(self):
        """Gets the previews of this Descriptors.  # noqa: E501

        Preview of the descriptor  # noqa: E501

        :return: The previews of this Descriptors.  # noqa: E501
        :rtype: list[Preview]
        """
        return self._previews

    @previews.setter
    def previews(self, previews):
        """Sets the previews of this Descriptors.

        Preview of the descriptor  # noqa: E501

        :param previews: The previews of this Descriptors.  # noqa: E501
        :type: list[Preview]
        """

        self._previews = previews

    @property
    def tags(self):
        """Gets the tags of this Descriptors.  # noqa: E501

        Tags that describe the descriptor  # noqa: E501

        :return: The tags of this Descriptors.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Descriptors.

        Tags that describe the descriptor  # noqa: E501

        :param tags: The tags of this Descriptors.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Descriptors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Descriptors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
