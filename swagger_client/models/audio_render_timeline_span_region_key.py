# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioRenderTimelineSpanRegionKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tonic_note': 'str',
        'tonic_accidental': 'str',
        'tonic_quality': 'str'
    }

    attribute_map = {
        'tonic_note': 'tonic_note',
        'tonic_accidental': 'tonic_accidental',
        'tonic_quality': 'tonic_quality'
    }

    def __init__(self, tonic_note=None, tonic_accidental=None, tonic_quality=None):  # noqa: E501
        """AudioRenderTimelineSpanRegionKey - a model defined in Swagger"""  # noqa: E501
        self._tonic_note = None
        self._tonic_accidental = None
        self._tonic_quality = None
        self.discriminator = None
        if tonic_note is not None:
            self.tonic_note = tonic_note
        if tonic_accidental is not None:
            self.tonic_accidental = tonic_accidental
        if tonic_quality is not None:
            self.tonic_quality = tonic_quality

    @property
    def tonic_note(self):
        """Gets the tonic_note of this AudioRenderTimelineSpanRegionKey.  # noqa: E501

        A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified  # noqa: E501

        :return: The tonic_note of this AudioRenderTimelineSpanRegionKey.  # noqa: E501
        :rtype: str
        """
        return self._tonic_note

    @tonic_note.setter
    def tonic_note(self, tonic_note):
        """Sets the tonic_note of this AudioRenderTimelineSpanRegionKey.

        A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified  # noqa: E501

        :param tonic_note: The tonic_note of this AudioRenderTimelineSpanRegionKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["c", "d", "e", "f", "g", "a", "b"]  # noqa: E501
        if tonic_note not in allowed_values:
            raise ValueError(
                "Invalid value for `tonic_note` ({0}), must be one of {1}"  # noqa: E501
                .format(tonic_note, allowed_values)
            )

        self._tonic_note = tonic_note

    @property
    def tonic_accidental(self):
        """Gets the tonic_accidental of this AudioRenderTimelineSpanRegionKey.  # noqa: E501

        A text representation of the accidental; if this field is specified, the tonic_note field should also be specified  # noqa: E501

        :return: The tonic_accidental of this AudioRenderTimelineSpanRegionKey.  # noqa: E501
        :rtype: str
        """
        return self._tonic_accidental

    @tonic_accidental.setter
    def tonic_accidental(self, tonic_accidental):
        """Sets the tonic_accidental of this AudioRenderTimelineSpanRegionKey.

        A text representation of the accidental; if this field is specified, the tonic_note field should also be specified  # noqa: E501

        :param tonic_accidental: The tonic_accidental of this AudioRenderTimelineSpanRegionKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["double flat", "flat", "natural", "sharp", "double sharp"]  # noqa: E501
        if tonic_accidental not in allowed_values:
            raise ValueError(
                "Invalid value for `tonic_accidental` ({0}), must be one of {1}"  # noqa: E501
                .format(tonic_accidental, allowed_values)
            )

        self._tonic_accidental = tonic_accidental

    @property
    def tonic_quality(self):
        """Gets the tonic_quality of this AudioRenderTimelineSpanRegionKey.  # noqa: E501

        The scale quality; if this field is not specified, the API selects the quality automatically  # noqa: E501

        :return: The tonic_quality of this AudioRenderTimelineSpanRegionKey.  # noqa: E501
        :rtype: str
        """
        return self._tonic_quality

    @tonic_quality.setter
    def tonic_quality(self, tonic_quality):
        """Sets the tonic_quality of this AudioRenderTimelineSpanRegionKey.

        The scale quality; if this field is not specified, the API selects the quality automatically  # noqa: E501

        :param tonic_quality: The tonic_quality of this AudioRenderTimelineSpanRegionKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["major", "natural_minor", "harmonic_minor", "melodic_minor", "ionian", "dorian", "phrygian", "lydian", "mixolydian", "aeolian", "locrian"]  # noqa: E501
        if tonic_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `tonic_quality` ({0}), must be one of {1}"  # noqa: E501
                .format(tonic_quality, allowed_values)
            )

        self._tonic_quality = tonic_quality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioRenderTimelineSpanRegionKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioRenderTimelineSpanRegionKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
