# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioRenderTimelineSpan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'span_type': 'str',
        'time': 'int',
        'tempo': 'int',
        'regions': 'list[AudioRenderTimelineSpanRegion]',
        'instrument_groups': 'list[AudioRenderTimelineSpanInstrumentGroup]',
        'tempo_changes': 'list[AudioRenderTimelineSpanTempoChanges]'
    }

    attribute_map = {
        'id': 'id',
        'span_type': 'span_type',
        'time': 'time',
        'tempo': 'tempo',
        'regions': 'regions',
        'instrument_groups': 'instrument_groups',
        'tempo_changes': 'tempo_changes'
    }

    def __init__(self, id=None, span_type=None, time=None, tempo=None, regions=None, instrument_groups=None, tempo_changes=None):  # noqa: E501
        """AudioRenderTimelineSpan - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._span_type = None
        self._time = None
        self._tempo = None
        self._regions = None
        self._instrument_groups = None
        self._tempo_changes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.span_type = span_type
        self.time = time
        if tempo is not None:
            self.tempo = tempo
        if regions is not None:
            self.regions = regions
        if instrument_groups is not None:
            self.instrument_groups = instrument_groups
        if tempo_changes is not None:
            self.tempo_changes = tempo_changes

    @property
    def id(self):
        """Gets the id of this AudioRenderTimelineSpan.  # noqa: E501

        An identifier which must be unique within the parent span  # noqa: E501

        :return: The id of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioRenderTimelineSpan.

        An identifier which must be unique within the parent span  # noqa: E501

        :param id: The id of this AudioRenderTimelineSpan.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def span_type(self):
        """Gets the span_type of this AudioRenderTimelineSpan.  # noqa: E501

        Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span  # noqa: E501

        :return: The span_type of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: str
        """
        return self._span_type

    @span_type.setter
    def span_type(self, span_type):
        """Sets the span_type of this AudioRenderTimelineSpan.

        Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span  # noqa: E501

        :param span_type: The span_type of this AudioRenderTimelineSpan.  # noqa: E501
        :type: str
        """
        if span_type is None:
            raise ValueError("Invalid value for `span_type`, must not be `None`")  # noqa: E501
        allowed_values = ["metered", "unmetered"]  # noqa: E501
        if span_type not in allowed_values:
            raise ValueError(
                "Invalid value for `span_type` ({0}), must be one of {1}"  # noqa: E501
                .format(span_type, allowed_values)
            )

        self._span_type = span_type

    @property
    def time(self):
        """Gets the time of this AudioRenderTimelineSpan.  # noqa: E501

        The absolute time, in seconds, at which the span starts  # noqa: E501

        :return: The time of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AudioRenderTimelineSpan.

        The absolute time, in seconds, at which the span starts  # noqa: E501

        :param time: The time of this AudioRenderTimelineSpan.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def tempo(self):
        """Gets the tempo of this AudioRenderTimelineSpan.  # noqa: E501

        The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo  # noqa: E501

        :return: The tempo of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: int
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioRenderTimelineSpan.

        The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo  # noqa: E501

        :param tempo: The tempo of this AudioRenderTimelineSpan.  # noqa: E501
        :type: int
        """

        self._tempo = tempo

    @property
    def regions(self):
        """Gets the regions of this AudioRenderTimelineSpan.  # noqa: E501

        An array of region objects within the span  # noqa: E501

        :return: The regions of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: list[AudioRenderTimelineSpanRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this AudioRenderTimelineSpan.

        An array of region objects within the span  # noqa: E501

        :param regions: The regions of this AudioRenderTimelineSpan.  # noqa: E501
        :type: list[AudioRenderTimelineSpanRegion]
        """

        self._regions = regions

    @property
    def instrument_groups(self):
        """Gets the instrument_groups of this AudioRenderTimelineSpan.  # noqa: E501

        An array of instrument_group objects that are used in this span  # noqa: E501

        :return: The instrument_groups of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: list[AudioRenderTimelineSpanInstrumentGroup]
        """
        return self._instrument_groups

    @instrument_groups.setter
    def instrument_groups(self, instrument_groups):
        """Sets the instrument_groups of this AudioRenderTimelineSpan.

        An array of instrument_group objects that are used in this span  # noqa: E501

        :param instrument_groups: The instrument_groups of this AudioRenderTimelineSpan.  # noqa: E501
        :type: list[AudioRenderTimelineSpanInstrumentGroup]
        """

        self._instrument_groups = instrument_groups

    @property
    def tempo_changes(self):
        """Gets the tempo_changes of this AudioRenderTimelineSpan.  # noqa: E501

        Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change  # noqa: E501

        :return: The tempo_changes of this AudioRenderTimelineSpan.  # noqa: E501
        :rtype: list[AudioRenderTimelineSpanTempoChanges]
        """
        return self._tempo_changes

    @tempo_changes.setter
    def tempo_changes(self, tempo_changes):
        """Sets the tempo_changes of this AudioRenderTimelineSpan.

        Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change  # noqa: E501

        :param tempo_changes: The tempo_changes of this AudioRenderTimelineSpan.  # noqa: E501
        :type: list[AudioRenderTimelineSpanTempoChanges]
        """

        self._tempo_changes = tempo_changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioRenderTimelineSpan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioRenderTimelineSpan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
