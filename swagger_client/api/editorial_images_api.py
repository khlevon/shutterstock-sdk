# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EditorialImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_editorial_categories(self, **kwargs):  # noqa: E501
        """(Deprecated) List editorial categories  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EditorialCategoryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_editorial_categories_with_http_info(self, **kwargs):  # noqa: E501
        """(Deprecated) List editorial categories  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EditorialCategoryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialCategoryResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_image(self, id, country, **kwargs):  # noqa: E501
        """Get editorial content details  # noqa: E501

        This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial ID (required)
        :param str country: Returns only if the content is available for distribution in a certain country (required)
        :return: EditorialContent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_image_with_http_info(id, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_image_with_http_info(id, country, **kwargs)  # noqa: E501
            return data

    def get_editorial_image_with_http_info(self, id, country, **kwargs):  # noqa: E501
        """Get editorial content details  # noqa: E501

        This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_with_http_info(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial ID (required)
        :param str country: Returns only if the content is available for distribution in a certain country (required)
        :return: EditorialContent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_editorial_image`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialContent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_image_0(self, id, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial content details  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_0(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial ID (required)
        :param str country: Returns only if the content is available for distribution in a certain country (required)
        :return: EditorialContent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_image_0_with_http_info(id, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_image_0_with_http_info(id, country, **kwargs)  # noqa: E501
            return data

    def get_editorial_image_0_with_http_info(self, id, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial content details  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_0_with_http_info(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial ID (required)
        :param str country: Returns only if the content is available for distribution in a certain country (required)
        :return: EditorialContent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_image_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_editorial_image_0`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_image_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialContent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_image_license_list(self, **kwargs):  # noqa: E501
        """List editorial image licenses  # noqa: E501

        This endpoint lists existing editorial image licenses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_license_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: Show licenses for the specified editorial image ID
        :param str license: Show editorial images that are available with the specified license name
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str sort: Sort order
        :param str username: Filter licenses by username of licensee
        :param datetime start_date: Show licenses created on or after the specified date
        :param datetime end_date: Show licenses created before the specified date
        :return: DownloadHistoryDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_image_license_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_image_license_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_editorial_image_license_list_with_http_info(self, **kwargs):  # noqa: E501
        """List editorial image licenses  # noqa: E501

        This endpoint lists existing editorial image licenses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_license_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: Show licenses for the specified editorial image ID
        :param str license: Show editorial images that are available with the specified license name
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str sort: Sort order
        :param str username: Filter licenses by username of licensee
        :param datetime start_date: Show licenses created on or after the specified date
        :param datetime end_date: Show licenses created before the specified date
        :return: DownloadHistoryDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'license', 'page', 'per_page', 'sort', 'username', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_image_license_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'image_id' in params:
            query_params.append(('image_id', params['image_id']))  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/licenses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadHistoryDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_image_livefeed(self, id, country, **kwargs):  # noqa: E501
        """Get editorial livefeed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_livefeed(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed is available for distribution in a certain country (required)
        :return: EditorialImageLivefeed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_image_livefeed_with_http_info(id, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_image_livefeed_with_http_info(id, country, **kwargs)  # noqa: E501
            return data

    def get_editorial_image_livefeed_with_http_info(self, id, country, **kwargs):  # noqa: E501
        """Get editorial livefeed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_livefeed_with_http_info(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed is available for distribution in a certain country (required)
        :return: EditorialImageLivefeed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_image_livefeed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_editorial_image_livefeed`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_image_livefeed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/livefeeds/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialImageLivefeed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_image_livefeed_items(self, id, country, **kwargs):  # noqa: E501
        """Get editorial livefeed items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_livefeed_items(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed items are available for distribution in a certain country (required)
        :return: EditorialImageContentDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_image_livefeed_items_with_http_info(id, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_image_livefeed_items_with_http_info(id, country, **kwargs)  # noqa: E501
            return data

    def get_editorial_image_livefeed_items_with_http_info(self, id, country, **kwargs):  # noqa: E501
        """Get editorial livefeed items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_livefeed_items_with_http_info(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed items are available for distribution in a certain country (required)
        :return: EditorialImageContentDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_image_livefeed_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_editorial_image_livefeed_items`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_image_livefeed_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/livefeeds/{id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialImageContentDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_image_livefeed_list(self, country, **kwargs):  # noqa: E501
        """Get editorial livefeed list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_livefeed_list(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns only livefeeds that are available for distribution in a certain country (required)
        :param int page: Page number
        :param int per_page: Number of results per page
        :return: EditorialImageLivefeedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_image_livefeed_list_with_http_info(country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_image_livefeed_list_with_http_info(country, **kwargs)  # noqa: E501
            return data

    def get_editorial_image_livefeed_list_with_http_info(self, country, **kwargs):  # noqa: E501
        """Get editorial livefeed list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_image_livefeed_list_with_http_info(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns only livefeeds that are available for distribution in a certain country (required)
        :param int page: Page number
        :param int per_page: Number of results per page
        :return: EditorialImageLivefeedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_image_livefeed_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_image_livefeed_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/livefeeds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialImageLivefeedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_livefeed(self, id, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial livefeed  # noqa: E501

        Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_livefeed(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed is available for distribution in a certain country (required)
        :return: EditorialLivefeed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_livefeed_with_http_info(id, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_livefeed_with_http_info(id, country, **kwargs)  # noqa: E501
            return data

    def get_editorial_livefeed_with_http_info(self, id, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial livefeed  # noqa: E501

        Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_livefeed_with_http_info(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed is available for distribution in a certain country (required)
        :return: EditorialLivefeed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_livefeed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_editorial_livefeed`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_livefeed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/livefeeds/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialLivefeed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_livefeed_items(self, id, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial livefeed items  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_livefeed_items(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed items are available for distribution in a certain country (required)
        :return: EditorialContentDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_livefeed_items_with_http_info(id, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_livefeed_items_with_http_info(id, country, **kwargs)  # noqa: E501
            return data

    def get_editorial_livefeed_items_with_http_info(self, id, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial livefeed items  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_livefeed_items_with_http_info(id, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Editorial livefeed ID; must be an URI encoded string (required)
        :param str country: Returns only if the livefeed items are available for distribution in a certain country (required)
        :return: EditorialContentDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_livefeed_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_editorial_livefeed_items`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_livefeed_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/livefeeds/{id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialContentDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_editorial_livefeed_list(self, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial livefeed list  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_livefeed_list(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns only livefeeds that are available for distribution in a certain country (required)
        :param int page: Page number
        :param int per_page: Number of results per page
        :return: EditorialLivefeedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_editorial_livefeed_list_with_http_info(country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_editorial_livefeed_list_with_http_info(country, **kwargs)  # noqa: E501
            return data

    def get_editorial_livefeed_list_with_http_info(self, country, **kwargs):  # noqa: E501
        """(Deprecated) Get editorial livefeed list  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_editorial_livefeed_list_with_http_info(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Returns only livefeeds that are available for distribution in a certain country (required)
        :param int page: Page number
        :param int per_page: Number of results per page
        :return: EditorialLivefeedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editorial_livefeed_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_editorial_livefeed_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/livefeeds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialLivefeedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_updated_editorial_images(self, type, date_updated_start, date_updated_end, country, **kwargs):  # noqa: E501
        """List updated content  # noqa: E501

        This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_updated_editorial_images(type, date_updated_start, date_updated_end, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted (required)
        :param datetime date_updated_start: Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param datetime date_updated_end: Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str date_taken_start: Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
        :param str date_taken_end: Show images that were taken before the specified date
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :param str sort: Sort by
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param int per_page: Number of results per page
        :return: EditorialUpdatedResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_updated_editorial_images_with_http_info(type, date_updated_start, date_updated_end, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_updated_editorial_images_with_http_info(type, date_updated_start, date_updated_end, country, **kwargs)  # noqa: E501
            return data

    def get_updated_editorial_images_with_http_info(self, type, date_updated_start, date_updated_end, country, **kwargs):  # noqa: E501
        """List updated content  # noqa: E501

        This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_updated_editorial_images_with_http_info(type, date_updated_start, date_updated_end, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted (required)
        :param datetime date_updated_start: Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param datetime date_updated_end: Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str date_taken_start: Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
        :param str date_taken_end: Show images that were taken before the specified date
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :param str sort: Sort by
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param int per_page: Number of results per page
        :return: EditorialUpdatedResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'date_updated_start', 'date_updated_end', 'country', 'date_taken_start', 'date_taken_end', 'cursor', 'sort', 'supplier_code', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_updated_editorial_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_updated_editorial_images`")  # noqa: E501
        # verify the required parameter 'date_updated_start' is set
        if ('date_updated_start' not in params or
                params['date_updated_start'] is None):
            raise ValueError("Missing the required parameter `date_updated_start` when calling `get_updated_editorial_images`")  # noqa: E501
        # verify the required parameter 'date_updated_end' is set
        if ('date_updated_end' not in params or
                params['date_updated_end'] is None):
            raise ValueError("Missing the required parameter `date_updated_end` when calling `get_updated_editorial_images`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_updated_editorial_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'date_updated_start' in params:
            query_params.append(('date_updated_start', params['date_updated_start']))  # noqa: E501
        if 'date_updated_end' in params:
            query_params.append(('date_updated_end', params['date_updated_end']))  # noqa: E501
        if 'date_taken_start' in params:
            query_params.append(('date_taken_start', params['date_taken_start']))  # noqa: E501
        if 'date_taken_end' in params:
            query_params.append(('date_taken_end', params['date_taken_end']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'supplier_code' in params:
            query_params.append(('supplier_code', params['supplier_code']))  # noqa: E501
            collection_formats['supplier_code'] = 'multi'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/updated', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialUpdatedResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_updated_images(self, type, date_updated_start, date_updated_end, country, **kwargs):  # noqa: E501
        """(Deprecated) List updated content  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_updated_images(type, date_updated_start, date_updated_end, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted (required)
        :param datetime date_updated_start: Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param datetime date_updated_end: Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str date_taken_start: Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
        :param str date_taken_end: Show images that were taken before the specified date
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :param str sort: Sort by
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param int per_page: Number of results per page
        :return: EditorialUpdatedResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_updated_images_with_http_info(type, date_updated_start, date_updated_end, country, **kwargs)  # noqa: E501
        else:
            (data) = self.get_updated_images_with_http_info(type, date_updated_start, date_updated_end, country, **kwargs)  # noqa: E501
            return data

    def get_updated_images_with_http_info(self, type, date_updated_start, date_updated_end, country, **kwargs):  # noqa: E501
        """(Deprecated) List updated content  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_updated_images_with_http_info(type, date_updated_start, date_updated_end, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted (required)
        :param datetime date_updated_start: Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param datetime date_updated_end: Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str date_taken_start: Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
        :param str date_taken_end: Show images that were taken before the specified date
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :param str sort: Sort by
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param int per_page: Number of results per page
        :return: EditorialUpdatedResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'date_updated_start', 'date_updated_end', 'country', 'date_taken_start', 'date_taken_end', 'cursor', 'sort', 'supplier_code', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_updated_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_updated_images`")  # noqa: E501
        # verify the required parameter 'date_updated_start' is set
        if ('date_updated_start' not in params or
                params['date_updated_start'] is None):
            raise ValueError("Missing the required parameter `date_updated_start` when calling `get_updated_images`")  # noqa: E501
        # verify the required parameter 'date_updated_end' is set
        if ('date_updated_end' not in params or
                params['date_updated_end'] is None):
            raise ValueError("Missing the required parameter `date_updated_end` when calling `get_updated_images`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_updated_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'date_updated_start' in params:
            query_params.append(('date_updated_start', params['date_updated_start']))  # noqa: E501
        if 'date_updated_end' in params:
            query_params.append(('date_updated_end', params['date_updated_end']))  # noqa: E501
        if 'date_taken_start' in params:
            query_params.append(('date_taken_start', params['date_taken_start']))  # noqa: E501
        if 'date_taken_end' in params:
            query_params.append(('date_taken_end', params['date_taken_end']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'supplier_code' in params:
            query_params.append(('supplier_code', params['supplier_code']))  # noqa: E501
            collection_formats['supplier_code'] = 'multi'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/updated', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialUpdatedResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def license_editorial_image(self, body, **kwargs):  # noqa: E501
        """(Deprecated) License editorial content  # noqa: E501

        Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_editorial_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LicenseEditorialContentRequest body: License editorial content (required)
        :return: LicenseEditorialContentResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.license_editorial_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.license_editorial_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def license_editorial_image_with_http_info(self, body, **kwargs):  # noqa: E501
        """(Deprecated) License editorial content  # noqa: E501

        Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_editorial_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LicenseEditorialContentRequest body: License editorial content (required)
        :return: LicenseEditorialContentResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_editorial_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `license_editorial_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/licenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseEditorialContentResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def license_editorial_images(self, body, **kwargs):  # noqa: E501
        """License editorial content  # noqa: E501

        This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_editorial_images(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LicenseEditorialContentRequest body: License editorial content (required)
        :return: LicenseEditorialContentResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.license_editorial_images_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.license_editorial_images_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def license_editorial_images_with_http_info(self, body, **kwargs):  # noqa: E501
        """License editorial content  # noqa: E501

        This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_editorial_images_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LicenseEditorialContentRequest body: License editorial content (required)
        :return: LicenseEditorialContentResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_editorial_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `license_editorial_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/licenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseEditorialContentResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_editorial_image_categories(self, **kwargs):  # noqa: E501
        """List editorial categories  # noqa: E501

        This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_editorial_image_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EditorialImageCategoryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_editorial_image_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_editorial_image_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_editorial_image_categories_with_http_info(self, **kwargs):  # noqa: E501
        """List editorial categories  # noqa: E501

        This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_editorial_image_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EditorialImageCategoryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_editorial_image_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialImageCategoryResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_editorial(self, country, **kwargs):  # noqa: E501
        """(Deprecated) Search editorial content  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_editorial(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str query: One or more search terms separated by spaces
        :param str sort: Sort by
        :param str category: Show editorial content within a certain editorial category; specify by category name
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param date date_start: Show only editorial content generated on or after a specific date
        :param date date_end: Show only editorial content generated on or before a specific date
        :param int per_page: Number of results per page
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :return: EditorialSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_editorial_with_http_info(country, **kwargs)  # noqa: E501
        else:
            (data) = self.search_editorial_with_http_info(country, **kwargs)  # noqa: E501
            return data

    def search_editorial_with_http_info(self, country, **kwargs):  # noqa: E501
        """(Deprecated) Search editorial content  # noqa: E501

        Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_editorial_with_http_info(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str query: One or more search terms separated by spaces
        :param str sort: Sort by
        :param str category: Show editorial content within a certain editorial category; specify by category name
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param date date_start: Show only editorial content generated on or after a specific date
        :param date date_end: Show only editorial content generated on or before a specific date
        :param int per_page: Number of results per page
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :return: EditorialSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country', 'query', 'sort', 'category', 'supplier_code', 'date_start', 'date_end', 'per_page', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_editorial" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `search_editorial`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'supplier_code' in params:
            query_params.append(('supplier_code', params['supplier_code']))  # noqa: E501
            collection_formats['supplier_code'] = 'multi'  # noqa: E501
        if 'date_start' in params:
            query_params.append(('date_start', params['date_start']))  # noqa: E501
        if 'date_end' in params:
            query_params.append(('date_end', params['date_end']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_editorial_images(self, country, **kwargs):  # noqa: E501
        """Search editorial images  # noqa: E501

        This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_editorial_images(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str query: One or more search terms separated by spaces
        :param str sort: Sort by
        :param str category: Show editorial content within a certain editorial category; specify by category name
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param date date_start: Show only editorial content generated on or after a specific date
        :param date date_end: Show only editorial content generated on or before a specific date
        :param int per_page: Number of results per page
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :return: EditorialSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_editorial_images_with_http_info(country, **kwargs)  # noqa: E501
        else:
            (data) = self.search_editorial_images_with_http_info(country, **kwargs)  # noqa: E501
            return data

    def search_editorial_images_with_http_info(self, country, **kwargs):  # noqa: E501
        """Search editorial images  # noqa: E501

        This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_editorial_images_with_http_info(country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country: Show only editorial content that is available for distribution in a certain country (required)
        :param str query: One or more search terms separated by spaces
        :param str sort: Sort by
        :param str category: Show editorial content within a certain editorial category; specify by category name
        :param list[str] supplier_code: Show only editorial content from certain suppliers
        :param date date_start: Show only editorial content generated on or after a specific date
        :param date date_end: Show only editorial content generated on or before a specific date
        :param int per_page: Number of results per page
        :param str cursor: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
        :return: EditorialSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country', 'query', 'sort', 'category', 'supplier_code', 'date_start', 'date_end', 'per_page', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_editorial_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `search_editorial_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'supplier_code' in params:
            query_params.append(('supplier_code', params['supplier_code']))  # noqa: E501
            collection_formats['supplier_code'] = 'multi'  # noqa: E501
        if 'date_start' in params:
            query_params.append(('date_start', params['date_start']))  # noqa: E501
        if 'date_end' in params:
            query_params.append(('date_end', params['date_end']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/editorial/images/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditorialSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
