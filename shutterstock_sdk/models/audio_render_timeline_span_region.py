# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioRenderTimelineSpanRegion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'region': 'str',
        'descriptor': 'str',
        'beat': 'int',
        'end_type': 'AudioRenderTimelineSpanRegionEndType',
        'key': 'AudioRenderTimelineSpanRegionKey'
    }

    attribute_map = {
        'id': 'id',
        'region': 'region',
        'descriptor': 'descriptor',
        'beat': 'beat',
        'end_type': 'end_type',
        'key': 'key'
    }

    def __init__(self, id=None, region=None, descriptor=None, beat=None, end_type=None, key=None):  # noqa: E501
        """AudioRenderTimelineSpanRegion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._region = None
        self._descriptor = None
        self._beat = None
        self._end_type = None
        self._key = None
        self.discriminator = None
        self.id = id
        self.region = region
        self.descriptor = descriptor
        self.beat = beat
        if end_type is not None:
            self.end_type = end_type
        if key is not None:
            self.key = key

    @property
    def id(self):
        """Gets the id of this AudioRenderTimelineSpanRegion.  # noqa: E501

        An identifier which must be unique within the parent span  # noqa: E501

        :return: The id of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioRenderTimelineSpanRegion.

        An identifier which must be unique within the parent span  # noqa: E501

        :param id: The id of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def region(self):
        """Gets the region of this AudioRenderTimelineSpanRegion.  # noqa: E501

        The type of region  # noqa: E501

        :return: The region of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AudioRenderTimelineSpanRegion.

        The type of region  # noqa: E501

        :param region: The region of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501
        allowed_values = ["music", "silence"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def descriptor(self):
        """Gets the descriptor of this AudioRenderTimelineSpanRegion.  # noqa: E501

        The descriptor ID needed to compose the music  # noqa: E501

        :return: The descriptor of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this AudioRenderTimelineSpanRegion.

        The descriptor ID needed to compose the music  # noqa: E501

        :param descriptor: The descriptor of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :type: str
        """
        if descriptor is None:
            raise ValueError("Invalid value for `descriptor`, must not be `None`")  # noqa: E501

        self._descriptor = descriptor

    @property
    def beat(self):
        """Gets the beat of this AudioRenderTimelineSpanRegion.  # noqa: E501

        The beat, relative to the span, at which the region object's music begins  # noqa: E501

        :return: The beat of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :rtype: int
        """
        return self._beat

    @beat.setter
    def beat(self, beat):
        """Sets the beat of this AudioRenderTimelineSpanRegion.

        The beat, relative to the span, at which the region object's music begins  # noqa: E501

        :param beat: The beat of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :type: int
        """
        if beat is None:
            raise ValueError("Invalid value for `beat`, must not be `None`")  # noqa: E501

        self._beat = beat

    @property
    def end_type(self):
        """Gets the end_type of this AudioRenderTimelineSpanRegion.  # noqa: E501


        :return: The end_type of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :rtype: AudioRenderTimelineSpanRegionEndType
        """
        return self._end_type

    @end_type.setter
    def end_type(self, end_type):
        """Sets the end_type of this AudioRenderTimelineSpanRegion.


        :param end_type: The end_type of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :type: AudioRenderTimelineSpanRegionEndType
        """

        self._end_type = end_type

    @property
    def key(self):
        """Gets the key of this AudioRenderTimelineSpanRegion.  # noqa: E501


        :return: The key of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :rtype: AudioRenderTimelineSpanRegionKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AudioRenderTimelineSpanRegion.


        :param key: The key of this AudioRenderTimelineSpanRegion.  # noqa: E501
        :type: AudioRenderTimelineSpanRegionKey
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioRenderTimelineSpanRegion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioRenderTimelineSpanRegion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
