# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from shutterstock_sdk.api_client import ApiClient


class ComputerVisionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_keywords(self, asset_id, **kwargs):  # noqa: E501
        """List suggested keywords  # noqa: E501

        This endpoint returns a list of suggested keywords for a media item that you specify or upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keywords(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetId asset_id: The asset ID or upload ID to suggest keywords for (required)
        :return: KeywordDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keywords_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keywords_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_keywords_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """List suggested keywords  # noqa: E501

        This endpoint returns a list of suggested keywords for a media item that you specify or upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keywords_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetId asset_id: The asset ID or upload ID to suggest keywords for (required)
        :return: KeywordDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keywords" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_keywords`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_id' in params:
            query_params.append(('asset_id', params['asset_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/cv/keywords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeywordDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_similar_images(self, asset_id, **kwargs):  # noqa: E501
        """List similar images  # noqa: E501

        This endpoint returns images that are visually similar to an image that you specify or upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_similar_images(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: The asset ID or upload ID to find similar images for (required)
        :param list[str] license: Show only images with the specified license
        :param bool safe: Enable or disable safe search
        :param Language language: Language for the keywords and categories in the response
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str view: Amount of detail to render in the response
        :return: ImageSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_similar_images_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_similar_images_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_similar_images_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """List similar images  # noqa: E501

        This endpoint returns images that are visually similar to an image that you specify or upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_similar_images_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: The asset ID or upload ID to find similar images for (required)
        :param list[str] license: Show only images with the specified license
        :param bool safe: Enable or disable safe search
        :param Language language: Language for the keywords and categories in the response
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str view: Amount of detail to render in the response
        :return: ImageSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'license', 'safe', 'language', 'page', 'per_page', 'view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_similar_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_similar_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_id' in params:
            query_params.append(('asset_id', params['asset_id']))  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501
            collection_formats['license'] = 'multi'  # noqa: E501
        if 'safe' in params:
            query_params.append(('safe', params['safe']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/cv/similar/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_similar_videos(self, asset_id, **kwargs):  # noqa: E501
        """List similar videos  # noqa: E501

        This endpoint returns videos that are visually similar to an image that you specify or upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_similar_videos(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: The asset ID or upload ID to find similar videos for (required)
        :param list[str] license: Show only videos with the specified license
        :param bool safe: Enable or disable safe search
        :param Language language: Language for the keywords and categories in the response
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str view: Amount of detail to render in the response
        :return: VideoSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_similar_videos_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_similar_videos_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_similar_videos_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """List similar videos  # noqa: E501

        This endpoint returns videos that are visually similar to an image that you specify or upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_similar_videos_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: The asset ID or upload ID to find similar videos for (required)
        :param list[str] license: Show only videos with the specified license
        :param bool safe: Enable or disable safe search
        :param Language language: Language for the keywords and categories in the response
        :param int page: Page number
        :param int per_page: Number of results per page
        :param str view: Amount of detail to render in the response
        :return: VideoSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'license', 'safe', 'language', 'page', 'per_page', 'view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_similar_videos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_similar_videos`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_id' in params:
            query_params.append(('asset_id', params['asset_id']))  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501
            collection_formats['license'] = 'multi'  # noqa: E501
        if 'safe' in params:
            query_params.append(('safe', params['safe']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/cv/similar/videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideoSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_ephemeral_image(self, body, **kwargs):  # noqa: E501
        """Upload ephemeral images  # noqa: E501

        Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_ephemeral_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageCreateRequest body: The image data in JPEG or PNG format (required)
        :return: ImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_ephemeral_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_ephemeral_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def upload_ephemeral_image_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upload ephemeral images  # noqa: E501

        Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_ephemeral_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageCreateRequest body: The image data in JPEG or PNG format (required)
        :return: ImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_ephemeral_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_ephemeral_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_image(self, body, **kwargs):  # noqa: E501
        """Upload images  # noqa: E501

        This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageCreateRequest body: A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
        :return: ComputerVisionImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def upload_image_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upload images  # noqa: E501

        This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageCreateRequest body: A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
        :return: ComputerVisionImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'customer_accessCode']  # noqa: E501

        return self.api_client.call_api(
            '/v2/cv/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputerVisionImageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
